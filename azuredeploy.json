{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "project": {
      "type": "string",
      "defaultValue": "storeloc8tr",
      "metadata": {
        "description": "The name of the project that you wish to create."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "demo",
      "metadata": {
        "description": "The name of the environment to be created."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location in which the Event Grid resources should be deployed."
      }
    },
    "cosmosDbThroughput": {
      "type": "int",
      "defaultValue": 400,
      "minValue": 400,
      "maxValue": 1000000,
      "metadata": {
        "description": "The throughput for the database to be shared"
      }
    },
    "apiPublisherEmail": {
      "type": "string",
      "defaultValue": "admin@storeloc8tr.com",
      "metadata": {
        "description": "The location in which the Event Grid resources should be deployed."
      }
    },
    "apiPublisherName": {
      "type": "string",
      "defaultValue": "Store Owner",
      "metadata": {
        "description": "The location in which the Event Grid resources should be deployed."
      }
    },
  },
  "variables": {
    "environment": "[toLower(parameters('environment'))]",
    "project": "[toLower(parameters('project'))]",
    "suffix": "[substring(uniqueString(subscription().subscriptionId), 0, 6)]",
    "storageAccountName": "[concat(variables('project'), variables('suffix'))]",
    "storageAccountid": "[concat(resourceGroup().id,'/providers/Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
    "storageContainerName": "auditlogs",
    "storageDeadletterContainerName": "auditdeadletters",
    "webStorageAccountName": "[concat(variables('project'), variables('environment'), 'web')]",
    "cdnEndpointName": "[variables('project')]",
    "cdnProfileName": "",
    "cdnOriginName": "",
    "functionAppPrefix": "[concat(variables('project'), '-', variables('environment'))]",
    "functionAppName": "[concat(variables('functionAppPrefix'), '-func')]",
    "applicationInsightsName": "[concat(variables('functionAppPrefix'), '-appins')]",
    "hostingPlanName": "[concat(variables('functionAppPrefix'), '-asp')]",
    "sourceCodeRepositoryUrl": "https://github.com/nianton/storelocator-demo.git",
    "sourceCodeBranch": "master",
    "sourceCodeManualIntegration": true,
    "apiManagementServiceName": "[concat(variables('project'), '-', variables('environment'),'-apim')]",
    "cosmosDbAccountName": "[concat(variables('project'), '-', variables('environment'), '-cdbacc')]",
    "cosmosDbName": "[concat(variables('project'), '-cdb')]",
    "cosmosDbContainerName": "stores",
    "cosmosDbLocations": [
      {
        "locationName": "[parameters('location')]",
        "failoverPriority": 0,
        "isZoneRedundant": false
      }
    ],
    "mapsAccountName": "[concat(variables('environment'), 'azmap')]"
  },
  "resources": [
    {
      "name": "[variables('storageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-07-01",
      "kind": "StorageV2",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('storageAccountType')]",
        "tier": "Standard"
      },
      "tags": {
        "project": "[variables('project')]",
        "environment": "[variables('environment')]",
        "displayName": "[variables('storageAccountName')]"
      },
      "properties": {
        "accessTier": "Hot"
      },
      "resources": [
        {
          "name": "[concat('default/', variables('storageContainerName'))]",
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "dependsOn": [
            "[variables('storageAccountName')]"
          ]
        },
        {
          "name": "[concat('default/', variables('storageDeadletterContainerName'))]",
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "dependsOn": [
            "[variables('storageAccountName')]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "computeMode": "Dynamic"
      },
      "tags": {
        "project": "[variables('project')]",
        "environment": "[variables('environment')]"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('microsoft.insights/components', variables('applicationInsightsName'))]"
      ],
      "resources": [
        {
          "apiVersion": "2018-11-01",
          "name": "[concat(variables('functionAppName'), '/web')]",
          "type": "Microsoft.Web/sites/sourcecontrols",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', variables('functionAppName'))]"
          ],
          "properties": {
            "RepoUrl": "[variables('sourceCodeRepositoryUrl')]",
            "branch": "[variables('sourceCodeBranch')]",
            "IsManualIntegration": "[variables('sourceCodeManualIntegration')]"
          }
        },
        {
          "type": "Microsoft.DocumentDB/databaseAccounts",
          "name": "[variables('cosmosDbAccountName')]",
          "apiVersion": "2019-08-01",
          "kind": "GlobalDocumentDB",
          "location": "[parameters('location')]",
          "properties": {
            "consistencyPolicy": {
              "defaultConsistencyLevel": "Session"
            },
            "locations": "[variables('cosmosDbLocations')]",
            "databaseAccountOfferType": "Standard",
            "enableAutomaticFailover": false,
            "enableMultipleWriteLocations": false
          }
        },
        {
          "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
          "name": "[concat(variables('cosmosDbAccountName'), '/', variables('cosmosDbName'))]",
          "apiVersion": "2019-08-01",
          "dependsOn": [
            "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]"
          ],
          "properties": {
            "resource": {
              "id": "[variables('cosmosDbName')]"
            },
            "options": {
              "throughput": "[parameters('cosmosDbThroughput')]"
            }
          }
        },
        {
          "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
          "name": "[concat(variables('cosmosDbAccountName'), '/', variables('cosmosDbName'), '/', variables('cosmosDbContainerName'))]",
          "apiVersion": "2019-08-01",
          "dependsOn": [
            "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDbAccountName'), variables('cosmosDbName'))]"
          ],
          "properties": {
            "resource": {
              "id": "[variables('cosmosDbContainerName')]",
              "partitionKey": {
                "paths": [
                  "/myPartitionKey"
                ],
                "kind": "Hash"
              },
              "indexingPolicy": {
                "indexingMode": "consistent",
                "includedPaths": [
                  {
                    "path": "/*"
                  }
                ],
                "excludedPaths": [
                  {
                    "path": "/myPathToNotIndex/*"
                  }
                ]
              }
            }
          }
        }
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "10.14.1"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionAppName'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('microsoft.insights/components/', variables('applicationInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "CosmosDbConnectionString",
              "value": "[listkeys(variables('cosmosDbAccountName'), '2017-04-01').primaryConnectionString]"
            },
            {
              "name": "CosmosDbName",
              "value": "[variables('cosmosDbName')]"
            },
            {
              "name": "CosmosDbContainerName",
              "value": "[variables('cosmosDbContainerName')]"
            }
          ]
        }
      },
      "tags": {
        "project": "[variables('project')]",
        "environment": "[variables('environment')]"
      }
    },
    {
      "apiVersion": "2018-05-01-preview",
      "name": "[variables('applicationInsightsName')]",
      "type": "microsoft.insights/components",
      "location": "[parameters('location')]",
      "tags": {
        "project": "[variables('project')]",
        "environment": "[variables('environment')]",
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('applicationInsightsName'))]": "Resource"
      },
      "properties": {
        "ApplicationId": "[variables('applicationInsightsName')]",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },
    {
      "apiVersion": "2019-01-01",
      "name": "[variables('apiManagementServiceName')]",
      "type": "Microsoft.ApiManagement/service",
      "location": "[parameters('location')]",
      "tags": {
      },
      "sku": {
        "name": "Consumption"
      },
      "properties": {
        "publisherEmail": "[parameters('apiPublisherEmail')]",
        "publisherName": "[parameters('apiPublisherName')]"
      }
    },
    {

      "type": "Microsoft.Cdn/profiles",
      "sku": {
        "name": "Standard_Microsoft"
      },
      "name": "[variables('cdnProfileName')]",
      "apiVersion": "2019-04-15",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "scale": null,
      "properties": {
        "provisioningState": "Succeeded",
        "resourceState": "Active"
      },
      "dependsOn": [
      ]
    },
    {

      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "name": "[variables('webStorageAccountName')]",
      "apiVersion": "2018-07-01",
      "location": "[parameters('location')]",
      "tags": {
      },
      "scale": null,
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [
          ],
          "ipRules": [
          ],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      },
      "dependsOn": [
      ]
    },
    {

      "type": "Microsoft.Cdn/profiles/endpoints",
      "name": "[concat(variables('cdnProfileName'), '/', variables('cdnEndpointName'))]",
      "apiVersion": "2016-04-02",
      "location": "[parameters('location')]",
      "tags": {
      },
      "scale": null,
      "properties": {
        "originHostHeader": "[variables('cdnOriginName')]",
        "isHttpAllowed": true,
        "isHttpsAllowed": true,
        "queryStringCachingBehavior": "IgnoreQueryString",
        "originPath": null,
        "origins": [
          {
            "name": "[concat(variables('cdnEndpointName'), '-origin-', uniqueString(resourceGroup().id))]",
            "properties": {
              "hostName": "[variables('cdnEndpointName')]",
              "httpPort": 80,
              "httpsPort": 443
            }
          }
        ],
        "contentTypesToCompress": [
          "text/plain",
          "text/html",
          "text/css",
          "text/javascript",
          "application/x-javascript",
          "application/javascript",
          "application/json",
          "application/xml"
        ],
        "isCompressionEnabled": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('cdnProfileName'))]"
      ]
    },
    {
      "apiVersion": "2018-05-01",
      "name": "[variables('mapsAccountName')]",
      "location": "global",
      "type": "Microsoft.Maps/accounts",
      "sku": {
        "name": "S0"
      }
    }
  ],
  "outputs": {
  }
}